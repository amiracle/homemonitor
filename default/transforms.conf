[portlookuptable]
filename = application_protocals.csv

[yourdevice]
REGEX = yourdevice
SOURCE_KEY = MetaData:Host
FORMAT = sourcetype::yourdevice
DEST_KEY = MetaData:Sourcetype

[neubot]
REGEX = neubot
SOURCE_KEY = MetaData:Host
FORMAT = sourcetype::neubot
DEST_KEY = MetaData:Sourcetype

[asus]
# Make sure that this matches the hostname of your router, asus is just an example. 
REGEX = asus
SOURCE_KEY = MetaData:Host
FORMAT = sourcetype::asus
DEST_KEY = MetaData:Sourcetype

[dd-wrt]
# Make sure that this matches the hostname of your router, dd-wrt is just an example.
REGEX = dd-wrt
SOURCE_KEY = MetaData:Host
FORMAT = sourcetype::dd-wrt
DEST_KEY = MetaData:Sourcetype

[fios]
# Make sure that this matches the hostname of your router, fios is just an example. 
REGEX = fios
SOURCE_KEY = MetaData:Host
FORMAT = sourcetype::fios
DEST_KEY = MetaData:Sourcetype

[linksys]
# Make sure that this matches the hostname of your router, linksys is just an example.
REGEX = linksys
SOURCE_KEY = MetaData:Host
FORMAT = sourcetype::linksys
DEST_KEY = MetaData:Sourcetype

[mikro]
# Make sure that this matches the hostname of your router, mikro is just an example.
REGEX = mikro
SOURCE_KEY = MetaData:Host
FORMAT = sourcetype::mikro
DEST_KEY = MetaData:Sourcetype

[netgear]
# Make sure that this matches the hostname of your router, netgear is just an example.
REGEX = netgear
SOURCE_KEY = MetaData:Host
FORMAT = sourcetype::netgear
DEST_KEY = MetaData:Sourcetype

[openwrt]
# Make sure that this matches the hostname of your router, openwrt is just an example.
REGEX = openwrt
SOURCE_KEY = MetaData:Host
FORMAT = sourcetype::openwrt
DEST_KEY = MetaData:Sourcetype

[pfsense]
# Make sure that this matches the hostname of your router, pfsense is just an example. 
REGEX = pfsense
SOURCE_KEY = MetaData:Host
FORMAT = sourcetype::pfsense
DEST_KEY = MetaData:Sourcetype

# pfsense extrations
# This extracts the common components within the firewall logs. After the IP version, the fields become specific to ip version and protocol. 
# The following extracts then take the extracts from the props.conf and do further extractions based on ip version and protocol.
# The extractions were based on the documentation found for the pfsense firewall listed here : https://doc.pfsense.org/index.php/Filter_Log_Format_for_pfSense_2.2

[REPORT-common-pf]
DELIMS = ","
FIELDS = "timestamp","sub_rule_number","field3","tracker","interface","reason","action","direction","ip_v"

# pfsense extrations
# tested and verified that the extractions work.
[REPORT-ipv4-tcp]
SOURCE_KEY = ip_spec4
REGEX = tcp,(?<length>\d+),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<src_port>[^,]*),(?<dest_port>[^,]*),(?<data_length>[^,]*)

# pfsense extractions
# tested and verified that the extractions work.
[REPORT-ipv4-udp]
SOURCE_KEY = ip_spec4
REGEX = (udp|UDP),(?<length>\d+),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<src_port>[^,]*),(?<dest_port>[^,]*),(?<data_length>[^,]*)

# pfsense extrations
# tested, verifiy that the fields extracted properly.  
# <source-port>,<destination-port>,<data-length>,<tcp-flags>,<sequence-number>,<ack-number>,<tcp-window>,<urg>,<tcp-options>
[REPORT-ipv6-tcp]
SOURCE_KEY = ip_spec6
REGEX = (tcp|TCP),\d+,(?<length>\d+),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<src_port>[^,]*),(?<dest_port>[^,]*),(?<data_length>[^,]*),(?<tcp_flags>[^,]*),(?<sequence_number>[^,]*),(?<ack_number>[^,]*),(?<tcp_window>[^,]*),(?<urg>[^,]*),(?<tcp_options>[^,]*)

# pfsense extractions ICMP
# <icmp-data> ::= <icmp-type>,(<echo-data> | <unreachproto-data> | <unreachport-data> | <other-unreachable-data> | <needfrag-data> | <tstamp-data> | <tstampreply-data> | <icmp-default-data>)
[REPORT-icmp]
SOURCE_KEY = ip_spec4
REGEX = icmp,(?<icpm_id>\d+),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<echo_id>[^,]*),(<echo_sequence>[^,]*)


# pfsense extractions CARP
# <carp-data> ::= <carp-type>,<carp-ttl>,<vhid>,<version>,<advbase>,<advskew>
[REPORT-carp]
SOURCE_KEY = ip_spec4
REGEX = carp,(?<carp_type>\d+),(?<carp_ttl>[^,]*),(?<vhid>[^,]*),(?<version>[^,]*),(<advbase>[^,]*),(?<advskew>[^,]*)

# pfsense extractions
# tested and verified that the extractions work.
[REPORT-ipv6-udp]
SOURCE_KEY = ip_spec6
REGEX = (udp|UDP),\d+,(?<length>\d+),(?<src_ip>[^,]*),(?<dest_ip>[^,]*),(?<src_port>[^,]*),(?<dest_port>[^,]*),(?<data_length>[^,]*)

#pfsense extrations
[REPORT-ipv4-pf]
DELIMS = ","
SOURCE_KEY = ip_spec4
FIELDS = "tos","ecn","ttl","id","offset","flags","protocol_id","protocol"

#pfsense extrations
[REPORT-ipv6-pf]
DELIMS = ","
SOURCE_KEY = ip_spec6
FIELDS = "class","flow_label","hop_limit","protocol","protocol_id"

[quantum]
# Make sure that this matches the hostname of your router, quantum is just an example.
REGEX = quantum
SOURCE_KEY = MetaData:Host
FORMAT = sourcetype::quantum
DEST_KEY = MetaData:Sourcetype

[sophos]
REGEX = sophos
SOURCE_KEY = MetaData:Host
FORMAT = sourcetype::sophos
DEST_KEY = MetaData:Sourcetype

[skyhub]
# Make sure that this matches the hostname of your router, skyhub is just an example.
REGEX = skyhub
SOURCE_KEY = MetaData:Host
FORMAT = sourcetype::skyhub
DEST_KEY = MetaData:Sourcetype

[tomato]
# Make sure that this matches the hostname of your router, tomato is just an example.
REGEX = tomato
SOURCE_KEY = MetaData:Host
FORMAT = sourcetype::tomato
DEST_KEY = MetaData:Sourcetype

#Lookup normalizing Action
[action_lookup]
filename = action_lookup.csv

[linksys_src_port_lookup]
filename = linksys_src_port.csv

[dnsLookup]
external_cmd = external_lookup.py host ip
fields_list = host, ip
